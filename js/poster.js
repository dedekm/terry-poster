// Generated by CoffeeScript 1.4.0
(function() {
  var camera, geometry1, grid, helpGrid, render, renderer, scene, setGrid;

  scene = new THREE.Scene();

  camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 100);

  scene = new THREE.Scene();

  renderer = new THREE.WebGLRenderer({
    logarithmicDepthBuffer: true
  });

  renderer.setSize(window.innerWidth, window.innerHeight);

  document.body.appendChild(renderer.domElement);

  renderer.setClearColor(0x000000);

  setGrid = function(w, h, d) {
    var a, b, g, x, y, z, _i, _j, _k, _ref, _ref1, _ref2;
    g = [];
    for (x = _i = 0, _ref = w - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
      a = [];
      for (y = _j = 0, _ref1 = h - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
        b = [];
        for (z = _k = 0, _ref2 = d - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; z = 0 <= _ref2 ? ++_k : --_k) {
          b.push({
            x: x,
            y: y,
            z: z,
            full: false
          });
        }
        a.push(b);
      }
      g.push(a);
    }
    return g;
  };

  helpGrid = function(grid) {
    var cube, g, material1, x, y, z, _i, _j, _ref, _ref1;
    g = new THREE.Group;
    for (x = _i = 0, _ref = grid.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
      for (y = _j = 0, _ref1 = grid[x].length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
        z = grid[x][y].length - 1;
        if (grid[x][y][z].full) {
          material1 = new THREE.MeshBasicMaterial({
            color: 0xff0000
          });
        } else {
          material1 = new THREE.MeshBasicMaterial({
            color: 0x00ff00
          });
        }
        cube = new THREE.Mesh(geometry1, material1);
        cube.position.set(x, y, z);
        g.add(cube);
      }
    }
    return g;
  };

  grid = setGrid(16, 16, 5);

  camera.position.set(8, 8, 20);

  geometry1 = new THREE.BoxGeometry(0.1, 0.1, 0.1);

  scene.add(helpGrid(grid));

  render = function() {
    return renderer.render(scene, camera);
  };

  render();

}).call(this);
