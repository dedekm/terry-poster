// Generated by CoffeeScript 1.4.0
(function() {
  var camera, canvas, ctx, geometry1, getData, grid, helpGrid, pixelGrid, render, renderer, scene, setGrid;

  canvas = document.createElement('canvas');

  canvas.id = 'canvas';

  canvas.width = 40;

  canvas.height = 40;

  document.body.appendChild(canvas);

  ctx = canvas.getContext("2d");

  ctx.font = "35px Georgia";

  ctx.fillStyle = "#000000";

  ctx.fillText("M", 3, 35);

  getData = function(content) {
    var bw, d, data, h, i, imageData, p, w, x, y, _i, _j, _k, _l, _len, _m;
    imageData = content.getImageData(0, 0, content.canvas.width, content.canvas.height);
    data = imageData.data;
    bw = [];
    for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
      d = data[i];
      if (i % 4 === 3) {
        bw.push(d);
      }
    }
    w = bw.length / canvas.width;
    h = bw.length / canvas.height;
    p = new Array(w);
    for (x = _j = 0; 0 <= w ? _j < w : _j > w; x = 0 <= w ? ++_j : --_j) {
      p[x] = [];
      for (y = _k = 0; 0 <= h ? _k < h : _k > h; y = 0 <= h ? ++_k : --_k) {
        p[x].push(0);
      }
    }
    for (x = _l = 0; 0 <= w ? _l < w : _l > w; x = 0 <= w ? ++_l : --_l) {
      for (y = _m = 0; 0 <= h ? _m < h : _m > h; y = 0 <= h ? ++_m : --_m) {
        d = x + (w * h - w) - (y * h);
        p[x][y] = bw[d];
      }
    }
    return p;
  };

  pixelGrid = getData(ctx);

  scene = new THREE.Scene();

  camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 100);

  scene = new THREE.Scene();

  renderer = new THREE.WebGLRenderer({
    logarithmicDepthBuffer: true
  });

  renderer.setSize(window.innerWidth, window.innerHeight);

  document.body.appendChild(renderer.domElement);

  renderer.setClearColor(0x000000);

  setGrid = function(w, h, d) {
    var a, b, g, x, y, z, _i, _j, _k, _ref, _ref1, _ref2;
    g = [];
    for (x = _i = 0, _ref = w - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
      a = [];
      for (y = _j = 0, _ref1 = h - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
        b = [];
        for (z = _k = 0, _ref2 = d - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; z = 0 <= _ref2 ? ++_k : --_k) {
          b.push({
            x: x,
            y: y,
            z: z,
            full: false
          });
        }
        a.push(b);
      }
      g.push(a);
    }
    return g;
  };

  helpGrid = function(grid, pixels) {
    var cube, g, material1, x, y, z, _i, _j, _ref, _ref1;
    g = new THREE.Group;
    for (x = _i = 0, _ref = grid.length; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
      for (y = _j = 0, _ref1 = grid[x].length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
        z = grid[x][y].length - 1;
        if (pixels[x][y] !== 0) {
          material1 = new THREE.MeshBasicMaterial({
            color: 0xff0000
          });
        } else {
          material1 = new THREE.MeshBasicMaterial({
            color: 0x00ff00
          });
        }
        cube = new THREE.Mesh(geometry1, material1);
        cube.position.set(x, y, z);
        g.add(cube);
      }
    }
    return g;
  };

  grid = setGrid(40, 40, 5);

  camera.position.set(20, 20, 45);

  geometry1 = new THREE.BoxGeometry(0.1, 0.1, 0.1);

  scene.add(helpGrid(grid, pixelGrid));

  render = function() {
    return renderer.render(scene, camera);
  };

  render();

}).call(this);
